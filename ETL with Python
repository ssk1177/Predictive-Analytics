{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/suriender/etl-with-python?scriptVersionId=188877987\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"a6b4978f","metadata":{"papermill":{"duration":0.004839,"end_time":"2024-07-18T22:37:31.551367","exception":false,"start_time":"2024-07-18T22:37:31.546528","status":"completed"},"tags":[]},"source":["# ETL with Python\n","\n","### Description\n","<font color=\"maroon\" font-family=\"Times New Roman\">The Aim is to perform ETL (Extract, Transform and Load) on different file formats (json, xml, csv); further, the objectives can be concluded in following points: </font>\n","1. Creation of directory and code structure (data, code and logs) <font color=\"blue\">[functions: createLogFiles, createDir] </font>\n","2. [__Extract__]\n","    * Downloading file from the URL and saving it to respective directory <font color=\"blue\">[function: downloadZIPData] </font>\n","    * Extraction of data files from compressed (zip) file <font color=\"blue\">[function: extractZIP]</font>\n","    * Reading different files format and creation of dataframes <font color=\"blue\">[function: readFile]</font>\n","2. [__Transform__] Performing data transformations\n","3. [__Load__] Storing data to file(s) <font color=\"blue\">[function: copyDFtoCSV]</font>"]},{"cell_type":"markdown","id":"bb6da044","metadata":{"papermill":{"duration":0.003913,"end_time":"2024-07-18T22:37:31.559774","exception":false,"start_time":"2024-07-18T22:37:31.555861","status":"completed"},"tags":[]},"source":["### Import Required Libraries"]},{"cell_type":"code","execution_count":1,"id":"b5045c6e","metadata":{"execution":{"iopub.execute_input":"2024-07-18T22:37:31.570555Z","iopub.status.busy":"2024-07-18T22:37:31.569581Z","iopub.status.idle":"2024-07-18T22:37:32.587766Z","shell.execute_reply":"2024-07-18T22:37:32.586497Z"},"papermill":{"duration":1.026778,"end_time":"2024-07-18T22:37:32.590717","exception":false,"start_time":"2024-07-18T22:37:31.563939","status":"completed"},"tags":[]},"outputs":[],"source":["import pandas as pd\n","import requests, zipfile, io, os\n","import logging"]},{"cell_type":"markdown","id":"178cc344","metadata":{"papermill":{"duration":0.003956,"end_time":"2024-07-18T22:37:32.599158","exception":false,"start_time":"2024-07-18T22:37:32.595202","status":"completed"},"tags":[]},"source":["### Functions block"]},{"cell_type":"code","execution_count":2,"id":"e27371c8","metadata":{"execution":{"iopub.execute_input":"2024-07-18T22:37:32.610624Z","iopub.status.busy":"2024-07-18T22:37:32.60952Z","iopub.status.idle":"2024-07-18T22:37:32.634865Z","shell.execute_reply":"2024-07-18T22:37:32.633777Z"},"papermill":{"duration":0.033708,"end_time":"2024-07-18T22:37:32.637617","exception":false,"start_time":"2024-07-18T22:37:32.603909","status":"completed"},"tags":[]},"outputs":[],"source":["# Function to create directory\n","def createDir(file):\n","    logging.info(\"Entering createDir\")\n","\n","    try:\n","        # Create dir/folder at current path\n","        path = os.path.join(os.getcwd(), file)\n","    \n","        # Create dir if it doesn't exist\n","        if not(os.path.exists(path) and os.path.isdir(path)):\n","            os.mkdir(path)\n","            logging.info(\"Directory '% s' created \" + file)\n","\n","    except Exception as ex:\n","        logging.error(\"Exception: Failed to create directory: \" + file)\n","\n","    logging.info(\"Entering createDir\")\n","\n","# Function to download zip file from the url\n","def downloadZIPData(url, path_to_save):\n","    logging.info(\"Extract:: Entering downloadZIPData\")\n","\n","    try:\n","        #Create temp dir to save the file\n","        createDir(path_to_save)\n","    \n","        with requests.get(url, stream=True) as r:\n","            r.raise_for_status()\n","            logging.debug(\"Extract:: Started downloading ZIP file from \"+ url)\n","            \n","            logging.info(\"Extract:: Downloading zip file from \" + url)\n","            with open(os.path.join(path_to_save, 'data.zip'), 'wb') as f:\n","                for chunk in r.iter_content(chunk_size=8192):\n","                    f.write(chunk)\n","    \n","        logging.info(\"Extract:: Downloaded ZIP file from \" + url + \" to \" + path_to_save + \" Successfully!\")\n","\n","    except Exception as ex:\n","        logging.error(\"Extract:: Exception: Failed to download zip file\")\n","    \n","    logging.info(\"Extract:: Exiting downloadZIPData\")\n","    \n","    return path_to_save + '/data.zip'\n","\n","# Function to extract zip file\n","def extractZIP(filepath, destpath):\n","    logging.info(\"Extract:: Entering extractZIP\")\n","    \n","    # Extract zip file to destination folder\n","    try:\n","        with zipfile.ZipFile(filepath) as zf:\n","            zf.extractall(destpath)\n","    \n","        logging.info(\"Extract:: Extracted \" + filepath + \" to \" + destpath + \" successfully!!\")\n","\n","    except Exception as ex:\n","        logging.error(\"Extract:: Exception: Failed to extract zip file\")\n","\n","    logging.info(\"Extract:: Exiting extractZIP\")\n","\n","# Function to read different file format files\n","def readFile(path, file):\n","    logging.info(\"Extract:: Entering readFile\")\n","    file_extension = os.path.splitext(file)[1][1:]\n","    logging.debug(\"Extract:: Started Converting file: \" + file + \" to dataframe.\")\n","    try:\n","        match (file_extension):\n","            case 'json':\n","                return pd.read_json(path + file, lines=True)\n","\n","            case 'csv':\n","                return pd.read_csv(path + file)\n","            \n","            case 'xml':\n","                return pd.read_xml(path + file)\n","\n","        logging.info(\"Extract:: File: \" + file + \" converted to dataframe successfully!!\")\n","        \n","    except Exception as ex:\n","        logging.error(\"Extract:: Exception raised while reading file: \" + file)\n","        logging.error(ex)\n","\n","    logging.info(\"Extract:: Exiting readFile\")\n","\n","# Function to Load dataframe to CSV file\n","def copyDFtoCSV(df, dir, filename):\n","\n","    logging.info(\"Load:: Entering copyDFtoCSV\")\n","    \n","    try:\n","        #Create required dir to save the file\n","        createDir(dir)\n","        file = os.getcwd() + \"/\" + dir + \"/\" + filename\n","    \n","        df.to_csv(file, sep=',', encoding='utf-8', index = False)\n","        logging.info(\"Load:: Copied Datframe to \" + file + \" successfully!!\")\n","        \n","    except Exception as ex:\n","        logging.error(\"Load:: Exception: Failed to copy Dataframe to file\")\n","    \n","    \n","    logging.info(\"Load:: Exiting copyDFtoCSV\")\n","\n","# Create log files under provided path and return file\n","def createLogFiles(dir):\n","    logging.info(\"Entering createLogFiles\")\n","\n","    try:\n","        # Create directory: Logs \n","        createDir(dir)\n","        \n","        debugFilepath = os.path.join(os.getcwd(), dir + \"/debug.log\")\n","    \n","        # Create file in append mode, create if file doesn't exist\n","        debugFile = open(debugFilepath, \"a+\")    \n","        \n","        ## Note: We will close this debug file once whole program completed, else we need to open everytime we write.\n","        \n","        logging.info(\"Created debug file at path: \" + debugFilepath + \" successfully!!\")\n","\n","    except Exception as ex:\n","        logging.error(\"Exception: Failed to create log files\")\n","    \n","    logging.info(\"Exiting createLogFiles\")\n","    \n","    return debugFilepath, debugFile\n","\n","debugFilepath, debugFile = createLogFiles(\"Logs\")\n","\n","logging.basicConfig(\n","        filename = debugFilepath,\n","        level = logging.DEBUG,\n","        force = True,\n","        format='[%(levelname)s] %(asctime)s - %(name)s - %(funcName)s:%(lineno)d - %(message)s',\n","        datefmt = '%Y-%m-%d %H:%M:%S'\n",")"]},{"cell_type":"markdown","id":"03814824","metadata":{"papermill":{"duration":0.004083,"end_time":"2024-07-18T22:37:32.646183","exception":false,"start_time":"2024-07-18T22:37:32.6421","status":"completed"},"tags":[]},"source":["### Extract"]},{"cell_type":"code","execution_count":3,"id":"4e8dc277","metadata":{"execution":{"iopub.execute_input":"2024-07-18T22:37:32.656323Z","iopub.status.busy":"2024-07-18T22:37:32.655948Z","iopub.status.idle":"2024-07-18T22:37:33.415004Z","shell.execute_reply":"2024-07-18T22:37:33.413878Z"},"papermill":{"duration":0.767177,"end_time":"2024-07-18T22:37:33.417577","exception":false,"start_time":"2024-07-18T22:37:32.6504","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_model</th>\n","      <th>year_of_manufacture</th>\n","      <th>price</th>\n","      <th>fuel</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ritz</td>\n","      <td>2012</td>\n","      <td>4626.865672</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ritz</td>\n","      <td>2011</td>\n","      <td>3507.462687</td>\n","      <td>Petrol</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>swift</td>\n","      <td>2014</td>\n","      <td>7388.059701</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ertiga</td>\n","      <td>2014</td>\n","      <td>8955.223881</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>dzire</td>\n","      <td>2014</td>\n","      <td>8208.955224</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>vitara brezza</td>\n","      <td>2018</td>\n","      <td>13805.970149</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>ciaz</td>\n","      <td>2015</td>\n","      <td>10074.626866</td>\n","      <td>Petrol</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>s cross</td>\n","      <td>2015</td>\n","      <td>9701.492537</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>ciaz</td>\n","      <td>2016</td>\n","      <td>13059.701493</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>ciaz</td>\n","      <td>2015</td>\n","      <td>11119.402985</td>\n","      <td>Diesel</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>90 rows × 4 columns</p>\n","</div>"],"text/plain":["        car_model  year_of_manufacture         price    fuel\n","0            ritz                 2012   4626.865672  Diesel\n","1            ritz                 2011   3507.462687  Petrol\n","2           swift                 2014   7388.059701  Diesel\n","3          ertiga                 2014   8955.223881  Diesel\n","4           dzire                 2014   8208.955224  Diesel\n","..            ...                  ...           ...     ...\n","85  vitara brezza                 2018  13805.970149  Diesel\n","86           ciaz                 2015  10074.626866  Petrol\n","87        s cross                 2015   9701.492537  Diesel\n","88           ciaz                 2016  13059.701493  Diesel\n","89           ciaz                 2015  11119.402985  Diesel\n","\n","[90 rows x 4 columns]"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["url = 'https://elasticbeanstalk-us-east-2-340729127361.s3.us-east-2.amazonaws.com/prices.zip'\n","\n","logging.info(\"Starting program\")\n","\n","# Downlaod the zip file from the URL\n","file = downloadZIPData(url, \"temp\")\n","\n","# Extract the downloaded zip to 'data' folder\n","extractZIP(file, \"data\")\n","\n","# Get list of files from 'data' dir\n","all_files = os.listdir('data')\n","\n","logging.debug(\"Extract:: List of files extracted: \" + str(all_files))\n","\n","# Convert files data to dataframe and make list of frames\n","list_of_frames = []\n","for file in all_files:\n","    df = readFile(\"data/\", file)\n","    list_of_frames.append(df)\n","\n","# Concat all the frames\n","df = pd.concat(list_of_frames, ignore_index = True)\n","\n","# Print dataframe\n","df"]},{"cell_type":"markdown","id":"b657c535","metadata":{"papermill":{"duration":0.004434,"end_time":"2024-07-18T22:37:33.426858","exception":false,"start_time":"2024-07-18T22:37:33.422424","status":"completed"},"tags":[]},"source":["### Transform"]},{"cell_type":"code","execution_count":4,"id":"0b6ab821","metadata":{"execution":{"iopub.execute_input":"2024-07-18T22:37:33.438011Z","iopub.status.busy":"2024-07-18T22:37:33.437589Z","iopub.status.idle":"2024-07-18T22:37:33.456674Z","shell.execute_reply":"2024-07-18T22:37:33.455389Z"},"papermill":{"duration":0.027445,"end_time":"2024-07-18T22:37:33.459053","exception":false,"start_time":"2024-07-18T22:37:33.431608","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_model</th>\n","      <th>year_of_manufacture</th>\n","      <th>price</th>\n","      <th>fuel</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ritz</td>\n","      <td>2012</td>\n","      <td>9253.73</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ritz</td>\n","      <td>2011</td>\n","      <td>7014.93</td>\n","      <td>Petrol</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>swift</td>\n","      <td>2014</td>\n","      <td>14776.12</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ertiga</td>\n","      <td>2014</td>\n","      <td>17910.45</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>dzire</td>\n","      <td>2014</td>\n","      <td>16417.91</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>85</th>\n","      <td>vitara brezza</td>\n","      <td>2018</td>\n","      <td>27611.94</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>ciaz</td>\n","      <td>2015</td>\n","      <td>20149.25</td>\n","      <td>Petrol</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>s cross</td>\n","      <td>2015</td>\n","      <td>19402.99</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>ciaz</td>\n","      <td>2016</td>\n","      <td>26119.40</td>\n","      <td>Diesel</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>ciaz</td>\n","      <td>2015</td>\n","      <td>22238.81</td>\n","      <td>Diesel</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>90 rows × 4 columns</p>\n","</div>"],"text/plain":["        car_model  year_of_manufacture     price    fuel\n","0            ritz                 2012   9253.73  Diesel\n","1            ritz                 2011   7014.93  Petrol\n","2           swift                 2014  14776.12  Diesel\n","3          ertiga                 2014  17910.45  Diesel\n","4           dzire                 2014  16417.91  Diesel\n","..            ...                  ...       ...     ...\n","85  vitara brezza                 2018  27611.94  Diesel\n","86           ciaz                 2015  20149.25  Petrol\n","87        s cross                 2015  19402.99  Diesel\n","88           ciaz                 2016  26119.40  Diesel\n","89           ciaz                 2015  22238.81  Diesel\n","\n","[90 rows x 4 columns]"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["# Double the price\n","df['price'] = df['price'].apply(lambda x: x*2)\n","logging.info(\"Transform:: Doubled the price!!\")\n","\n","# Round the price to 2 decimal places\n","df['price'] = df['price'].round(decimals = 2)\n","logging.info(\"Transform:: Rounded up the price to two decimal places!!\")\n","\n","#Print the dataframe\n","df"]},{"cell_type":"markdown","id":"43d59b9f","metadata":{"papermill":{"duration":0.004774,"end_time":"2024-07-18T22:37:33.469187","exception":false,"start_time":"2024-07-18T22:37:33.464413","status":"completed"},"tags":[]},"source":["### Load"]},{"cell_type":"code","execution_count":5,"id":"5c9371cf","metadata":{"execution":{"iopub.execute_input":"2024-07-18T22:37:33.481649Z","iopub.status.busy":"2024-07-18T22:37:33.480863Z","iopub.status.idle":"2024-07-18T22:37:33.490923Z","shell.execute_reply":"2024-07-18T22:37:33.489949Z"},"papermill":{"duration":0.019432,"end_time":"2024-07-18T22:37:33.493831","exception":false,"start_time":"2024-07-18T22:37:33.474399","status":"completed"},"tags":[]},"outputs":[],"source":["# Copy dataframe to output dir\n","copyDFtoCSV(df, \"output\", \"output.csv\")\n","\n","# Close the log file\n","debugFile.close()\n","\n","# Delete the temp folder - Not deleting for this assignment sake, but ideally it should be deleted!\n","#os.remove(\"temp\")\n","\n","logging.info(\"Program Completed Successfully...!!!\")"]},{"cell_type":"code","execution_count":null,"id":"bfefb5b7","metadata":{"papermill":{"duration":0.004912,"end_time":"2024-07-18T22:37:33.504045","exception":false,"start_time":"2024-07-18T22:37:33.499133","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":5.577592,"end_time":"2024-07-18T22:37:34.03093","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-07-18T22:37:28.453338","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}